name: CI/CD Pipeline for FastAPI on ECS

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'infra/**'
      - 'Dockerfile'
      - '.github/workflows/deploy.yml'

env:
  AWS_REGION: us-east-1
  CLUSTER: mb-api-cluster
  SERVICE: mb-api-service
  TASK_DEF_NAME: mb-api-task
  CONTAINER_NAME: mb-api-container
  ECR_REPO: mb-api

jobs:
  ci-checks:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run pytest
        run: pytest --maxfail=1 --disable-warnings -v

  infra:
    name: Terraform Plan & Apply
    needs: ci-checks
    runs-on: ubuntu-latest
    outputs:
      vpc_id: ${{ steps.extract-vpc-id.outputs.vpc_id }}
    defaults:
      run:
        working-directory: infra
    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=plan.tfplan -var="image_tag=${{ github.sha }}"

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve plan.tfplan

      - name: Export VPC_ID directly from Terraform output
        id: extract-vpc-id
        run: |
          RAW_OUTPUT=$(terraform output -raw vpc_id 2>&1)
          VPC_ID=$(echo "$RAW_OUTPUT" | grep -oE 'vpc-[0-9a-f]+' | head -n1)
          echo "vpc_id=$VPC_ID" >> "$GITHUB_OUTPUT"

  deploy:
    name: Build, Migrate & Deploy to ECS
    needs: [ci-checks, infra]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Export VPC_ID from job output
        run: |
          echo "VPC_ID=${{ needs.infra.outputs.vpc_id }}"
          echo "VPC_ID=${{ needs.infra.outputs.vpc_id }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:           ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag & Push Docker Image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Resolve public subnet IDs by tag
        shell: bash
        run: |
          SUBNET_IDS=$(aws ec2 describe-subnets \
            --filters \
              Name=vpc-id,Values=$VPC_ID \
            --query 'Subnets[].SubnetId' \
            --output text | tr '\t' ',')
          echo "SUBNET_IDS=$SUBNET_IDS" >> $GITHUB_ENV

      - name: Resolve ECS service SG ID by tag
        shell: bash
        run: |
          SECURITY_GROUP_IDS=$(aws ec2 describe-security-groups \
            --filters \
              Name=vpc-id,Values=$VPC_ID \
            --query 'SecurityGroups[].GroupId' \
            --output text | tr '\t' ',')
          echo "SECURITY_GROUP_IDS=$SECURITY_GROUP_IDS" >> $GITHUB_ENV

      - name: Render New Task Definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-arn: ${{ env.TASK_DEF_NAME }}
          container-name:     ${{ env.CONTAINER_NAME }}
          image:              ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}

      - name: Register New Task Definition
        id: register-task-def
        run: |
          RENDERED="${{ steps.render-task-def.outputs.task-definition }}"
          jq 'del(.tags)' "$RENDERED" > task-def-to-register.json
          NEW_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-def-to-register.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          echo "task_def_arn=$NEW_ARN" >> $GITHUB_OUTPUT

      - name: Deploy to ECS via CLI
        run: |
          echo "ðŸ“¦ Updating ECS service with new task definition"
          aws ecs update-service \
            --cluster "$CLUSTER" \
            --service "$SERVICE" \
            --task-definition "${{ steps.register-task-def.outputs.task_def_arn }}" \
            --force-new-deployment
